// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: queries.sql

package data

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (
	  user_id, title, descr
) VALUES (
  $1, $2, $3
)
RETURNING id, created_at, to_tsvector(descr)
`

type CreateEntryParams struct {
	UserID int32  `json:"user_id"`
	Title  string `json:"title"`
	Descr  string `json:"descr"`
}

type CreateEntryRow struct {
	ID         int32            `json:"id"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	ToTsvector interface{}      `json:"to_tsvector"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (CreateEntryRow, error) {
	row := q.db.QueryRow(ctx, createEntry, arg.UserID, arg.Title, arg.Descr)
	var i CreateEntryRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.ToTsvector)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
	  real_name, username, pubkey
) VALUES (
  $1, $2, $3
)
RETURNING id, username, pubkey
`

type CreateUserParams struct {
	RealName string `json:"real_name"`
	Username string `json:"username"`
	Pubkey   []byte `json:"pubkey"`
}

type CreateUserRow struct {
	ID       int32  `json:"id"`
	Username string `json:"username"`
	Pubkey   []byte `json:"pubkey"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.RealName, arg.Username, arg.Pubkey)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Username, &i.Pubkey)
	return i, err
}

const getEntryCategories = `-- name: GetEntryCategories :many
SELECT
    id, user_id, created_at, updated_at, name, descr
FROM
    categories
WHERE
    id IN (
        SELECT
            category_id
        FROM
            entry_categories a
        WHERE
            a.entry_id = $1
            AND a.user_id = $2
    )
`

type GetEntryCategoriesParams struct {
	EntryID int32 `json:"entry_id"`
	UserID  int32 `json:"user_id"`
}

func (q *Queries) GetEntryCategories(ctx context.Context, arg GetEntryCategoriesParams) ([]Category, error) {
	rows, err := q.db.Query(ctx, getEntryCategories, arg.EntryID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Descr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT
    id, uid, created_at, updated_at, real_name, username, hash, email, pubkey
FROM
    users
WHERE
    id = $1
LIMIT
    1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RealName,
		&i.Username,
		&i.Hash,
		&i.Email,
		&i.Pubkey,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT
    id, uid, created_at, updated_at, real_name, username, hash, email, pubkey
FROM
    users
WHERE
    username = $1
LIMIT
    1
`

func (q *Queries) GetUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByName, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RealName,
		&i.Username,
		&i.Hash,
		&i.Email,
		&i.Pubkey,
	)
	return i, err
}

const getUserCategories = `-- name: GetUserCategories :many
SELECT
    id, user_id, created_at, updated_at, name, descr
FROM
    categories
WHERE
    user_id = $1
`

func (q *Queries) GetUserCategories(ctx context.Context, userID int32) ([]Category, error) {
	rows, err := q.db.Query(ctx, getUserCategories, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Descr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserEntries = `-- name: GetUserEntries :many
SELECT
    id, user_id, pubic, created_at, updated_at, title, descr, signature
FROM
    entries
WHERE
    user_id = $1
`

func (q *Queries) GetUserEntries(ctx context.Context, userID int32) ([]Entry, error) {
	rows, err := q.db.Query(ctx, getUserEntries, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Pubic,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Descr,
			&i.Signature,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const similarEntries = `-- name: SimilarEntries :many
SELECT
    id,
    similarity(descr, $2) AS similarity,
    ts_headline(
        'english',
        descr,
        q,
        'StartSel = <b>, StopSel = </b>'
    ) :: text AS headline,
    title
FROM
    entries,
    to_tsquery($2) q
WHERE
    user_id = $1
    AND similarity(descr, $2) > 0.0
    AND similarity(descr, $2) < 1.0
ORDER BY
    similarity DESC
LIMIT
    10
`

type SimilarEntriesParams struct {
	UserID     int32  `json:"user_id"`
	Similarity string `json:"similarity"`
}

type SimilarEntriesRow struct {
	ID         int32   `json:"id"`
	Similarity float32 `json:"similarity"`
	Headline   string  `json:"headline"`
	Title      string  `json:"title"`
}

func (q *Queries) SimilarEntries(ctx context.Context, arg SimilarEntriesParams) ([]SimilarEntriesRow, error) {
	rows, err := q.db.Query(ctx, similarEntries, arg.UserID, arg.Similarity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SimilarEntriesRow{}
	for rows.Next() {
		var i SimilarEntriesRow
		if err := rows.Scan(
			&i.ID,
			&i.Similarity,
			&i.Headline,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
